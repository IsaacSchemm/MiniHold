@page "/credentials"
@using I8Beef.Ecobee;
@using I8Beef.Ecobee.Exceptions;
@using I8Beef.Ecobee.Messages;
@using MiniHold.Abstractions;

<h2>API Key</h2>

@if (!ClientStatic.HasApiKey)
{
    <p>
        Enter the API key of an ecobee app you've created in the Developer section of the ecobee portal.
    </p>

    <form @onsubmit="SetApiKey">
        <label>
            API key
            <input type="text" class="form-control" @bind-value="newApiKey" />
        </label>
        <button type="submit" class="btn btn-primary">
            Add API key
        </button>
    </form>
}
else
{
    <form @onsubmit="RemoveApiKey">
        <button type="submit" class="btn btn-danger">
            Remove API key
        </button>
    </form>
}

<hr />

<h2>Token</h2>

@if (ClientStatic.EcobeePin != null)
{
    <p>
        Your PIN code is: <strong>@ClientStatic.EcobeePin</strong>
    </p>
    <p>
        Enter this code in the My Apps > Add Application section of the customer portal, and press OK when ready.
    </p>

    <form @onsubmit="GetToken">
        <button type="submit" class="btn btn-primary">
            OK
        </button>
    </form>
}

@if (ClientStatic.ActiveClient != null)
{
    <form @onsubmit="RemoveToken">
        <button type="submit" class="btn btn-danger">
            Remove token
        </button>
    </form>
}

@code {
    string newApiKey = "";

    protected override async Task OnInitializedAsync()
    {
        await ClientStatic.UpdateAsync();
        await base.OnInitializedAsync();
    }

    private async Task SetApiKey()
    {
        await ClientStatic.SetApiKey(newApiKey);
    }

    private async Task RemoveApiKey()
    {
        await ClientStatic.RemoveApiKey();
    }

    private async Task<StoredAuthToken> GetStoredAuthToken(CancellationToken _ = default)
    {
        return await SecureStorage.Default.GetAsync("ecobeeToken") is string json
            ? System.Text.Json.JsonSerializer.Deserialize<StoredAuthToken>(json)
            : null;
    }

    private async Task SetStoredAuthToken(StoredAuthToken token, CancellationToken _ = default)
    {
        await SecureStorage.Default.SetAsync("ecobeeToken", System.Text.Json.JsonSerializer.Serialize(token));
    }

    private async Task GetToken()
    {
        await ClientStatic.GetToken();
    }

    private async Task RemoveToken()
    {
        await ClientStatic.RemoveToken();
    }
}
