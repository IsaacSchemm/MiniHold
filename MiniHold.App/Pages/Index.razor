@inherits MiniHoldPage
@page "/"
@inject IJSRuntime JsRuntime
@using I8Beef.Ecobee;
@using MiniHold.Abstractions;

<LoadingSpinner Busy="@App.Busy" />

@if (ClientStatic.EcobeePin != null)
{
    <p>
        Your PIN code is: <strong>@ClientStatic.EcobeePin</strong>
    </p>
    <p>
        Enter this code in the My Apps > Add Application section of the customer portal, and press OK when ready.
    </p>

    <form @onsubmit="ClientStatic.GetToken">
        <button type="submit" class="btn btn-primary">
            OK
        </button>
    </form>
}

@foreach (var ti in ClientStatic.ThermostatObjects)
{
    var thermostatClient = ti.ThermostatClient;
    var info = ti.Information;

    var activeEvent = info.Events.Where(x => x.Running).FirstOrDefault();

    <RefreshBox Thermostat="@ti" />

    <div class="container-fluid indexPage">
        <div class="row">
            <div class="col-md-12 col-lg-8">
                <hr />
                <h5>Current</h5>
                <TemperatureDisplayBox UserInterfaceReading="@info.Readings" />
            </div>
            <div class="col-md-12 col-lg-4">
                <hr />
                <h5>30m Hold</h5>
                <div class="grid">
                    <GridButton Position="(2, 1)" OnClick="() => holdHeat(ti, 30)" Text="Heat" ClassName="heat" Disabled="!info.Heat" />
                    <GridButton Position="(3, 1)" OnClick="() => holdCool(ti, 30)" Text="Cool" ClassName="cool" Disabled="!info.Cool" />
                    <GridButton Position="(4, 1)" OnClick="() => holdFan(ti, 30)" Text="Fan" Title="Keep air handler fan running" />
                </div>
            </div>
            <div class="col-md-6 col-lg-4">
                <h4 class="visually-hidden">Outdoor Temperature</h4>
                <hr />
                <h5>Weather</h5>
                <TemperatureDisplayBox UserInterfaceReading="@info.Weather" />
                @foreach (var f in info.DailyForecasts.Take(1))
                {
                    <hr />
                    <h5>Forecast</h5>
                    <div>@f.Date.ToString("dddd, MMM d")</div>
                    <TemperatureDisplayBox UserInterfaceReading="@f" />
                }
            </div>
            <div class="col-md-6 col-lg-4">
                <h4 class="visually-hidden">Indoor Temperature</h4>
                <hr />
                <h5>Runtime</h5>
                <TemperatureDisplayBox UserInterfaceReading="@info.RuntimeDisplay" />
                @if (activeEvent != null)
                {
                    <hr />
                    <h5>@System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(activeEvent.EventType)</h5>
                    if (activeEvent.ComfortLevelRef != null)
                    {
                        string comfortLevelName = info.ComfortLevels
                            .Where(c => c.Ref == activeEvent.ComfortLevelRef)
                            .Select(c => c.Name)
                            .DefaultIfEmpty(activeEvent.ComfortLevelRef)
                            .First();
                        <div>
                            <strong>@comfortLevelName</strong>
                        </div>
                    }
                    <div>
                        <strong>Start:</strong> @activeEvent.StartDate?.ToString("h:mm tt M/d/yy")
                    </div>
                    <div>
                        <strong>End:</strong> @activeEvent.EndDate?.ToString("h:mm tt M/d/yy")
                    </div>
                    if (activeEvent.EventType == "hold")
                    {
                        <center>
                            <button class="btn btn-secondary mt-2" @onclick="() => clearHold(ti)">
                                Cancel Hold
                            </button>
                        </center>
                    }
                }
            </div>
            <div class="col-md-12 col-lg-4">
                <h4 class="visually-hidden">Apply Hold</h4>
                <hr />
                <div class="grid">
                    <h5 style="grid-row: 1; grid-column: 1 / 3">
                        Away
                    </h5>
                    <GridButton Position="(2, 1)" OnClick="() => holdAwayTo(ti, 6)" Text="until 6 am" />
                    <GridButton Position="(2, 2)" OnClick="() => holdAwayTo(ti, 11)" Text="until 11 am" />
                    <GridButton Position="(3, 1)" OnClick="() => holdAwayTo(ti, 15)" Text="until 3 pm" />
                    <GridButton Position="(3, 2)" OnClick="() => holdAwayTo(ti, 20)" Text="until 8 pm" />

                    <div style="grid-row: 4; grid-column: 1 / 3" class="text-muted">
                        (or until cancelled)
                    </div>
                </div>
                <hr />
                <div class="grid">
                    <h5 style="grid-row: 1; grid-column: 1 / 3">
                        Backoff
                    </h5>
                    <GridButton Position="(2, 1)" OnClick="() => holdBackoff(ti, 60)" Text="1 hour" />
                    <GridButton Position="(2, 2)" OnClick="() => holdBackoff(ti, 120)" Text="2 hours" />

                    <div style="grid-row: 3; grid-column: 1 / 3" class="text-muted">
                        (or until cancelled)
                    </div>
                </div>
            </div>
            <div class="col-12">
                <hr />
            </div>
            <div class="col-xl-6">
                <h4>Sensors</h4>

                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Temp</th>
                            <th scope="col">Occ.</th>
                            <th scope="col">Diff.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var average = ti.Information.Readings.Temperature.SingleOrDefault();
                            foreach (var s in ti.Information.Sensors)
                            {
                                var specific = s.Readings.Temperature.SingleOrDefault();
                                var offset = Temperature.FromFarenheit(specific.Farenheit - average.Farenheit);
                                <tr>
                                    <td>@s.Name</td>
                                    <td>@specific</td>
                                    <td>
                                        @if (s.Occupied)
                                        {
                                            <span class="visually-hidden">yes</span>
                                            <span aria-hidden="true">✓</span>
                                        }
                                        else
                                        {
                                            <span class="visually-hidden">no</span>
                                        }
                                    </td>
                                    <td>@offset</td>
                                </tr>
                            }
                        }
                        <tr class="text-muted">
                            <td>All</td>
                            <td>@average</td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-xl-6">
                <h4>Comfort Settings</h4>

                <table class="table">
                    <thead>
                        <tr style="white-space: nowrap">
                            <th scope="col">Name</th>
                            <th scope="col">
                                Heat at
                            </th>
                            <th scope="col">
                                Stop at
                            </th>
                            <th scope="col">
                                Cool at
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var s in ti.Information.ComfortLevels)
                        {
                            <tr>
                                <td>@s.Name</td>
                                <td>@info.ApplyHeatDelta(s.HeatTemp)</td>
                                <td>@s.HeatTemp – @s.CoolTemp</td>
                                <td>@info.ApplyCoolDelta(s.CoolTemp)</td>
                            </tr>
                        }
                        <tr class="text-muted">
                            <td>Runtime</td>
                            <td>@info.ApplyHeatDelta(info.Runtime.TempRange.HeatTemp)</td>
                            <td>@info.Runtime.TempRange.HeatTemp – @info.Runtime.TempRange.CoolTemp</td>
                            <td>@info.ApplyCoolDelta(info.Runtime.TempRange.CoolTemp)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="mb-4"></div>

@code {
    async Task holdHeat(ThermostatObject ti, int minutes)
    {
        await ti.Act(async () =>
        {
            var info = ti.Information;
            var newRange = QuickActions.DetermineNewRangeToApplyHeat(info);
            if (!await JsRuntime.InvokeAsync<bool>("confirm", $"This will set the temperature range to {newRange.ShortDescription}."))
            {
                return;
            }
            await QuickActions.SetHoldAsync(
                ti.ThermostatClient,
                newRange,
                TimeSpan.FromMinutes(minutes));
        });
    }

    async Task holdCool(ThermostatObject ti, int minutes)
    {
        await ti.Act(async () =>
        {
            var info = ti.Information;
            var newRange = QuickActions.DetermineNewRangeToApplyCool(info);
            if (!await JsRuntime.InvokeAsync<bool>("confirm", $"This will set the temperature range to {newRange.ShortDescription}."))
            {
                return;
            }
            await QuickActions.SetHoldAsync(
                ti.ThermostatClient,
                newRange,
                TimeSpan.FromMinutes(minutes));
        });
    }

    async Task holdFan(ThermostatObject ti, int minutes)
    {
        await ti.Act(async () => await QuickActions.SetFanAsync(ti.ThermostatClient, true, TimeSpan.FromMinutes(minutes)));
    }

    async Task holdBackoff(ThermostatObject ti, int minutes)
    {
        await ti.Act(async () =>
        {
            var info = ti.Information;
            var newRange = QuickActions.DetermineNewRangeToApplyBackoff(info);
            if (!await JsRuntime.InvokeAsync<bool>("confirm", $"This will set the temperature range to {newRange.ShortDescription}."))
            {
                return;
            }
            await QuickActions.SetHoldAsync(
                ti.ThermostatClient,
                newRange,
                TimeSpan.FromMinutes(minutes));
        });
    }

    async Task holdAwayTo(ThermostatObject ti, int hour)
    {
        await ti.Act(async () => await QuickActions.SetAwayUntilClockAsync(ti.ThermostatClient, TimeSpan.FromHours(hour)));
    }

    async Task clearHold(ThermostatObject ti)
    {
        await ti.Act(async () => await ti.ThermostatClient.CancelHoldAsync());
    }
}
