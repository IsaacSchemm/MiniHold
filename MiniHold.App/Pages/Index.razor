@inherits MiniHoldPage
@page "/"
@inject IJSRuntime JsRuntime
@using I8Beef.Ecobee;
@using MiniHold.Abstractions;

<LoadingSpinner Busy="@App.Busy" />

@if (ClientStatic.ThermostatObjects.Count == 0)
{
    <p>
        Use the Setup page to set up the app.
    </p>
}

@foreach (var ti in ClientStatic.ThermostatObjects)
{
    var thermostatClient = ti.ThermostatClient;
    var info = ti.Information;

    var activeEvent = info.Events.Where(x => x.Running).FirstOrDefault();

    <RefreshBox Thermostat="@ti" />

    <div class="container-fluid indexPage">
        <div class="row">
            <div class="col-md-12 col-lg-4">
                <h4 class="visually-hidden">Apply Hold</h4>
                <hr />
                <div class="grid">
                    <h5 style="grid-row: 1; grid-column: 1">
                        15m Hold
                    </h5>
                    <GridButton Position="(2, 1)" OnClick="() => holdHeat(ti, 15)" Text="Heat" Title="Heat to 1.5°F past current threshold" />
                    <GridButton Position="(3, 1)" OnClick="() => holdCool(ti, 15)" Text="Cool" Title="Cool to 1.5°F past current threshold" />
                    <GridButton Position="(4, 1)" OnClick="() => holdFan(ti, 15)" Text="Fan" Title="Keep air handler fan running" />

                    <h5 style="grid-row: 1; grid-column: 2">
                        30m Hold
                    </h5>
                    <GridButton Position="(2, 2)" OnClick="() => holdHeat(ti, 30)" Text="Heat" Title="Heat to 1.5°F past current threshold" />
                    <GridButton Position="(3, 2)" OnClick="() => holdCool(ti, 30)" Text="Cool" Title="Cool to 1.5°F past current threshold" />
                    <GridButton Position="(4, 2)" OnClick="() => holdFan(ti, 30)" Text="Fan" Title="Keep air handler fan running" />

                    <h5 style="grid-row: 5; grid-column: 1 / 3">
                        Away
                    </h5>
                    <GridButton Position="(6, 1)" OnClick="() => holdAway(ti, 1)" Text="for 1 hour" />
                    <GridButton Position="(7, 1)" OnClick="() => holdAway(ti, 24)" Text="for 1 day" />
                    <GridButton Position="(8, 1)" OnClick="() => holdAway(ti, 168)" Text="for 1 week" />
                    <GridButton Position="(6, 2)" OnClick="() => holdAwayTo(ti, 7)" Text="until 7 am" />
                    <GridButton Position="(7, 2)" OnClick="() => holdAwayTo(ti, 16)" Text="until 4 pm" />
                    <GridButton Position="(8, 2)" OnClick="() => holdAwayTo(ti, 21)" Text="until 9 pm" />

                    <div style="grid-row: 9; grid-column: 1 / 3" class="text-muted">
                        (or until cancelled)
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-4">
                <h4 class="visually-hidden">Outdoor Temperature</h4>
                <hr />
                <h5>Weather</h5>
                <TemperatureDisplayBox UserInterfaceReading="@info.Weather" />
                @foreach (var f in info.DailyForecasts.Take(1))
                {
                    <hr />
                    <h5>Forecast</h5>
                    <div>@f.Date.ToString("dddd, MMM d")</div>
                    <TemperatureDisplayBox UserInterfaceReading="@f" />
                }
            </div>
            <div class="col-md-6 col-lg-4">
                <h4 class="visually-hidden">Indoor Temperature</h4>
                <hr />
                <h5>Runtime</h5>
                <TemperatureDisplayBox UserInterfaceReading="@info.Runtime" />
                @if (activeEvent != null)
                {
                    <hr />
                    <h5>@System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(activeEvent.EventType)</h5>
                    <div>
                        <strong>Start:</strong> @activeEvent.StartDate?.ToString("h:mm tt M/d/yy")
                    </div>
                    <div>
                        <strong>End:</strong> @activeEvent.EndDate?.ToString("h:mm tt M/d/yy")
                    </div>
                    if (activeEvent.EventType == "hold")
                    {
                        <center>
                            <button class="btn btn-secondary mt-2" @onclick="ti.ClearHold">
                                Cancel Hold
                            </button>
                        </center>
                    }
                }
            </div>
            <div class="col-12">
                <hr />
            </div>
            <div class="col-xl-6">
                <h4>Sensors</h4>

                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Temp</th>
                            <th scope="col">Occ.</th>
                            <th scope="col">Diff.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var average = ti.Information.Readings.Temperature.SingleOrDefault();
                            foreach (var s in ti.Information.Sensors)
                            {
                                var specific = s.Readings.Temperature.SingleOrDefault();
                                var offset = Temperature.FromFarenheit(specific.Farenheit - average.Farenheit);
                                <tr>
                                    <td>@s.Name</td>
                                    <td>@specific</td>
                                    <td>
                                        @if (s.Occupied)
                                        {
                                            <span class="visually-hidden">yes</span>
                                            <span aria-hidden="true">✓</span>
                                        }
                                        else
                                        {
                                            <span class="visually-hidden">no</span>
                                        }
                                    </td>
                                    <td>@offset</td>
                                </tr>
                            }
                        }
                        <tr class="text-muted">
                            <td>All</td>
                            <td>@average</td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-xl-6">
                <h4>Comfort Settings</h4>

                <table class="table">
                    <thead>
                        <tr style="white-space: nowrap">
                            <th scope="col">Name</th>
                            <th scope="col">
                                Heat at
                            </th>
                            <th scope="col">
                                Stop at
                            </th>
                            <th scope="col">
                                Cool at
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var s in ti.Information.ComfortLevels)
                        {
                            <tr>
                                <td>@s.Name</td>
                                <td>@info.ApplyHeatDelta(s.HeatTemp)</td>
                                <td>@s.HeatTemp – @s.CoolTemp</td>
                                <td>@info.ApplyCoolDelta(s.CoolTemp)</td>
                            </tr>
                        }
                        <tr class="text-muted">
                            <td>Runtime</td>
                            <td>@info.ApplyHeatDelta(info.Runtime.TempRange.HeatTemp)</td>
                            <td>@info.Runtime.TempRange.HeatTemp – @info.Runtime.TempRange.CoolTemp</td>
                            <td>@info.ApplyCoolDelta(info.Runtime.TempRange.CoolTemp)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="mb-4"></div>

@code {
        async Task holdHeat(ThermostatObject ti, int minutes)
        {
            await ti.Act(async () =>
            {
                var info = ti.Information;
                var newSetPoint = info.Readings.Temperature.First() + info.HeatDelta + Temperature.FromFarenheit(1.5m);
                if (!info.Runtime.TempRange.Contains(newSetPoint))
                {
                    if (!await JsRuntime.InvokeAsync<bool>("confirm", $"This will set the heating set point to {newSetPoint}, which is outside the current range. Continue anyway?"))
                    {
                        return;
                    }
                }
                await QuickActions.SetHoldAsync(
                    ti.ThermostatClient,
                    info.Runtime.TempRange
                        .WithHeatTemp(newSetPoint)
                        .WithCoolTemp(newSetPoint + Temperature.FromFarenheit(10)),
                    TimeSpan.FromMinutes(minutes));
            });
        }

        async Task holdCool(ThermostatObject ti, int minutes)
        {
            await ti.Act(async () =>
            {
                var info = ti.Information;
                var newSetPoint = info.Readings.Temperature.First() - info.CoolDelta - Temperature.FromFarenheit(1.5m);
                if (!info.Runtime.TempRange.Contains(newSetPoint))
                {
                    if (!await JsRuntime.InvokeAsync<bool>("confirm", $"This will set the cooling set point to {newSetPoint}, which is outside the current range. Continue anyway?"))
                    {
                        return;
                    }
                }
                await QuickActions.SetHoldAsync(
                    ti.ThermostatClient,
                    info.Runtime.TempRange
                        .WithCoolTemp(newSetPoint)
                        .WithHeatTemp(newSetPoint - Temperature.FromFarenheit(10)),
                    TimeSpan.FromMinutes(minutes));
            });
        }

        async Task holdFan(ThermostatObject ti, int minutes)
        {
            await ti.Act(async () => await QuickActions.SetFanAsync(ti.ThermostatClient, true, TimeSpan.FromMinutes(minutes)));
        }

        async Task holdAway(ThermostatObject ti, int hours)
        {
            await ti.Act(async () => await QuickActions.SetAwayAsync(ti.ThermostatClient, TimeSpan.FromHours(hours)));
        }

        async Task holdAwayTo(ThermostatObject ti, int hour)
        {
            await ti.Act(async () => await QuickActions.SetAwayUntilClockAsync(ti.ThermostatClient, TimeSpan.FromHours(hour)));
        }
}
