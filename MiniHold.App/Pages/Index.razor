@page "/"
@using I8Beef.Ecobee;
@using MiniHold.Abstractions;

<style type="text/css">
    button {
        white-space: nowrap;
        overflow-x: hidden;
        text-overflow: ellipsis;
    }

    h5 {
        margin-top: 1em;
        margin-bottom: 0.25em;
        font-weight: bold;
    }

    .temp {
        font-size: 150%;
    }

    .tempBlock {
        display: inline-block;
        margin-right: 0.5em;
    }

    .heat {
        background-color: mistyrose;
        color: black;
    }

    .cool {
        background-color: lightcyan;
        color: black;
    }
</style>

@if (ClientStatic.Busy > 0)
{
    <div style="position: fixed; width: 100vw; height: 100vh; top: 0; left: 0; background-color: rgb(128, 128, 128, 0.5); z-index: 2" title="Loading"></div>
}

@foreach (var ti in ClientStatic.ThermostatObjects)
{
    var thermostatClient = ti.ThermostatClient;
    var info = ti.Information;

    <h1>@thermostatClient.Name</h1>
    <p>
        @thermostatClient.Brand
        <br />
        Firmware version: @thermostatClient.Version
    </p>

    <div title="Equipment Status">
        @foreach (string str in info.EquipmentStatus)
        {
            <div class="badge bg-primary">
                @str
            </div>
            @:&nbsp;
        }
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6 col-lg-4">
                <hr />
                <h5>Outdoor</h5>
                <div>
                    @info.Weather.Condition
                </div>
                <div title="Temperature" class="temp">
                    @info.Weather.Temperature.FarenheitString
                </div>
                <div>
                    <strong>Humidity:</strong> @info.Weather.Humidity.PercentageString
                </div>
                <hr />
                <h5>Indoor</h5>
                <div title="Temperature" class="temp">
                    @info.Actual.Temperature.FirstOrDefault()?.FarenheitString
                </div>
                <div>
                    <strong>Humidity:</strong> @info.Actual.Humidity.FirstOrDefault()?.PercentageString
                </div>
                <hr />
                <h5>Runtime</h5>
                <div class="tempBlock">
                    Heat
                    <div title="Temperature" class="temp">
                        @info.Desired.HeatTemp.FarenheitString
                    </div>
                </div>
                <div class="tempBlock">
                    Cool
                    <div title="Temperature" class="temp">
                        @info.Desired.CoolTemp.FarenheitString
                    </div>
                </div>
                <div>
                    <strong>Fan:</strong> @info.Desired.Fan
                </div>
            </div>
            <div class="col-md-6 col-lg-4">
                <hr />
                <div style="display: grid; row-gap: 1em; column-gap: 1em">
                    <h5 style="grid-row: 1; grid-column: 1">
                        10m Hold
                    </h5>
                    <button class="btn btn-secondary heat" style="grid-column: 1" @onclick="ti.Hold10Heat">
                        +2°
                    </button>
                    <button class="btn btn-secondary cool" style="grid-column: 1" @onclick="ti.Hold10Cool">
                        -2°
                    </button>
                    <button class="btn btn-secondary" style="grid-column: 1" @onclick="ti.Hold10Fan">
                        Fan
                    </button>
                    <button class="btn btn-secondary" style="grid-column: 1" @onclick="ti.Hold10Away">
                        Away
                    </button>
                    <h5 style="grid-row: 1; grid-column: 2">
                        30m Hold
                    </h5>
                    <button class="btn btn-secondary heat" style="grid-row: 2; grid-column: 2" @onclick="ti.Hold30Heat">
                        +2°
                    </button>
                    <button class="btn btn-secondary cool" style="grid-row: 3; grid-column: 2" @onclick="ti.Hold30Cool">
                        -2°
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 4; grid-column: 2" @onclick="ti.Hold30Fan">
                        Fan
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 5; grid-column: 2" @onclick="ti.Hold30Away">
                        Away
                    </button>
                    <h5 style="grid-row: 6; grid-column: 1 / 3">
                        Away
                    </h5>
                    <button class="btn btn-secondary" style="grid-row: 7; grid-column: 1" @onclick="ti.Hold2HAway">
                        for 2 hours
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 8; grid-column: 1" @onclick="ti.Hold4HAway">
                        for 4 hours
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 9; grid-column: 1" @onclick="ti.Hold6HAway">
                        for 6 hours
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 7; grid-column: 2" @onclick="ti.Hold7AAway">
                        until 7 am
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 8; grid-column: 2" @onclick="ti.Hold4PAway">
                        until 4 pm
                    </button>
                    <button class="btn btn-secondary" style="grid-row: 9; grid-column: 2" @onclick="ti.Hold9PAway">
                        until 9 pm
                    </button>
                </div>
            </div>
            <div class="col-md-6 col-lg-4">
                <hr />
                <h5>Program</h5>
                <div class="tempBlock">
                    Heat
                    <div title="Temperature" class="temp">
                        @info.Program.HeatTemp.FarenheitString
                    </div>
                </div>
                <div class="tempBlock">
                    Cool
                    <div title="Temperature" class="temp">
                        @info.Program.CoolTemp.FarenheitString
                    </div>
                </div>@if (info.Events.FirstOrDefault() is Event e && e.EventType == "hold")
                {
                    var temp = e.AbsoluteTemperatureRanges.SingleOrDefault();
                    <hr />
                    <h5>Hold</h5>
                    <div class="tempBlock">
                        Heat
                        <div title="Temperature" class="temp">
                            @temp?.HeatTemp.FarenheitString
                        </div>
                    </div>
                    <div class="tempBlock">
                        Cool
                        <div title="Temperature" class="temp">
                            @temp?.CoolTemp.FarenheitString
                        </div>
                    </div>
                    <div>
                        <strong>Fan:</strong> @temp?.Fan
                    </div>
                    <div>
                        <strong>Start:</strong> @e.StartDate?.ToString("h:mm tt M/d/yy")
                    </div>
                    <div>
                        <strong>End:</strong> @e.EndDate?.ToString("h:mm tt M/d/yy")
                    </div>
                    <center>
                        <button class="btn btn-secondary mt-2" @onclick="ti.ClearHold">
                            Cancel Hold
                        </button>
                    </center>
                }
                <hr />
                <p align="center">
                    Last updated:
                    <br />
                    @ti.LastUpdated.ToString("h:mm tt M/d/yy")
                    <br />
                    <button class="btn btn-primary mt-2" @onclick="ti.Refresh">
                        Refresh
                    </button>
                </p>
            </div>
        </div>
    </div>
}

<div class="mb-4"></div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ClientStatic.UpdateAsync();
        await base.OnInitializedAsync();
    }
}