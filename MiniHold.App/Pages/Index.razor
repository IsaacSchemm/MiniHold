@page "/"
@using I8Beef.Ecobee;
@using MiniHold.Abstractions;

<style type="text/css">
    .column {
        display: block;
        margin: auto;
        width: 160px;
        vertical-align: top;
    }

    @@media (min-width: 1050px) {
        .column {
            display: inline-block;
            margin: auto 1em;
        }
    }

    h5 {
        margin-top: 1em;
        margin-bottom: 0.25em;
        font-weight: bold;
    }

    .temp {
        font-size: 150%;
    }

    .tempBlock {
        display: inline-block;
        margin-right: 0.5em;
    }

    .heat {
        background-color: mistyrose;
        color: black;
    }

    .cool {
        background-color: lightcyan;
        color: black;
    }
</style>

@foreach (var ti in thermostatClients)
{
    var thermostatClient = ti.t;
    var info = ti.i;

    <h1>@thermostatClient.Name</h1>
    <p>@thermostatClient.Brand &ndash; @thermostatClient.Version</p>

    <div title="Equipment Status">
        @foreach (string str in info.EquipmentStatus)
        {
            <div class="badge bg-primary">
                @str
            </div>
        }
    </div>

    <div class="column">
        <h5>Outdoor</h5>
        <div>
            @info.Weather.Condition
        </div>
        <div title="Temperature" class="temp">
            @info.Weather.Temperature.FarenheitString
        </div>
        <div>
            <strong>Humidity:</strong> @info.Weather.Humidity.PercentageString
        </div>
        <h5>Indoor</h5>
        <div title="Temperature" class="temp">
            @info.Actual.Temperature.FirstOrDefault()?.FarenheitString
        </div>
        <div>
            <strong>Humidity:</strong> @info.Actual.Humidity.FirstOrDefault()?.PercentageString
        </div>
        <h5>Runtime</h5>
        <div class="tempBlock">
            Heat
            <div title="Temperature" class="temp">
                @info.Desired.HeatTemp.FarenheitString
            </div>
        </div>
        <div class="tempBlock">
            Cool
            <div title="Temperature" class="temp">
                @info.Desired.CoolTemp.FarenheitString
            </div>
        </div>
        <div>
            <strong>Fan:</strong> @info.Desired.Fan
        </div>
    </div>
    <div class="column" style="width: 300px">
        <div style="display: grid; grid-template-columns: 1fr 1fr; row-gap: 1em; column-gap: 1em">
            <h5 style="grid-row: 1; grid-column: 1">
                10m Hold
            </h5>
            <button class="btn btn-secondary heat" style="grid-column: 1">
                +2°
            </button>
            <button class="btn btn-secondary cool" style="grid-column: 1">
                -2°
            </button>
            <button class="btn btn-secondary" style="grid-column: 1" @onclick="ti.Hold10Fan">
                Fan
            </button>
            <button class="btn btn-secondary" style="grid-column: 1">
                Away
            </button>
            <h5 style="grid-row: 1; grid-column: 2">
                30m Hold
            </h5>
            <button class="btn btn-secondary heat" style="grid-row: 2; grid-column: 2">
                +2°
            </button>
            <button class="btn btn-secondary cool" style="grid-row: 3; grid-column: 2">
                -2°
            </button>
            <button class="btn btn-secondary" style="grid-row: 4; grid-column: 2">
                Fan
            </button>
            <button class="btn btn-secondary" style="grid-row: 5; grid-column: 2">
                Away
            </button>
            <h5 style="grid-row: 6; grid-column: 1 / 3">
                Away
            </h5>
            <button class="btn btn-secondary">
                for 2 hours
            </button>
            <button class="btn btn-secondary">
                for 4 hours
            </button>
            <button class="btn btn-secondary">
                for 6 hours
            </button>
            <button class="btn btn-secondary">
                until 7 am
            </button>
            <button class="btn btn-secondary">
                until 4 pm
            </button>
            <button class="btn btn-secondary">
                until 9 pm
            </button>
        </div>
    </div>
    <div class="column">
        <h5>Program</h5>
        <div class="tempBlock">
            Heat
            <div title="Temperature" class="temp">
                @info.Program.HeatTemp.FarenheitString
            </div>
        </div>
        <div class="tempBlock">
            Cool
            <div title="Temperature" class="temp">
                @info.Program.CoolTemp.FarenheitString
            </div>
        </div>
        @if (info.Events.FirstOrDefault() is Event e && e.EventType == "hold")
        {
            var temp = e.AbsoluteTemperatureRanges.SingleOrDefault();
            <h5>Hold</h5>
            <div class="tempBlock">
                Heat
                <div title="Temperature" class="temp">
                    @temp?.HeatTemp.FarenheitString
                </div>
            </div>
            <div class="tempBlock">
                Cool
                <div title="Temperature" class="temp">
                    @temp?.CoolTemp.FarenheitString
                </div>
            </div>
            <div>
                <strong>Fan:</strong> @temp?.Fan
            </div>
            <div>
                <strong>Start:</strong> @e.StartDate?.ToString("h:mm tt M/d/yy")
            </div>
            <div>
                <strong>End:</strong> @e.EndDate?.ToString("h:mm tt M/d/yy")
            </div>
            <center>
                <button class="btn btn-secondary mt-2" @onclick="ti.ClearHold">
                    Cancel Hold
                </button>
            </center>
        }
    </div>
}

@code {
    List<TI> thermostatClients = new();

    class TI
    {
        public ThermostatClient t;
        public ThermostatInformation i;

        public async Task Hold10Fan()
        {
            await QuickActions.SetFanAsync(t, i.Desired, true, TimeSpan.FromMinutes(10));
            i = await t.GetInformationAsync();
        }

        public async Task ClearHold()
        {
            await t.CancelHoldAsync();
            i = await t.GetInformationAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        thermostatClients.Clear();

        await StaticThermostatClient.UpdateAsync();
        if (StaticThermostatClient.ActiveClient != null)
            await foreach (var tClient in ThermostatClient.GetAllAsync(StaticThermostatClient.ActiveClient))
                thermostatClients.Add(new TI { t = tClient, i = await tClient.GetInformationAsync() });
        await base.OnInitializedAsync();
    }
}